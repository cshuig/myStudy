package com.utils;import org.junit.Before;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.mock.web.MockHttpServletRequest;import org.springframework.mock.web.MockHttpServletResponse;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.ContextHierarchy;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.context.web.WebAppConfiguration;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.web.context.WebApplicationContext;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;@RunWith(SpringJUnit4ClassRunner.class)@WebAppConfiguration(value = "src/main/webapp")@ContextHierarchy({        @ContextConfiguration(name = "parent",locations = "classpath*:applicationContext.xml"),})public class BaseJunit {    @Autowired    protected WebApplicationContext wac;    protected MockMvc mockMvc;    protected final MockHttpServletRequest request = new MockHttpServletRequest();    protected final MockHttpServletResponse response = new MockHttpServletResponse();    @Before    public void setup() {        this.mockMvc = webAppContextSetup(this.wac).build();    }    protected ResultActions mockMvcGet_bak(String url)throws Exception{        return mockMvc.perform(MockMvcRequestBuilders.get(url)).andDo(print());    }    protected ResultActions mockMvcPost_bak(String url, String jsonStr) throws Exception{        return mockMvc.perform(MockMvcRequestBuilders.post(url)                .contentType(MediaType.APPLICATION_JSON)                .content(jsonStr))                .andDo(print());    }    protected ResultActions mockMvcGet(String url) throws Exception{        MockHttpServletRequestBuilder mb = MockMvcRequestBuilders.get(url);        return mockMvc.perform(mb).andDo(print());    }    protected ResultActions mockMvcPost(String url,String jsonStr) throws Exception{        MockHttpServletRequestBuilder mb = MockMvcRequestBuilders.post(url);        mb.contentType(MediaType.APPLICATION_JSON);        mb.content(jsonStr);        return mockMvc.perform(mb)                .andDo(print());    }}